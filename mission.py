import socket
import sys
print("๐งญ ูุณุงุฑ ุงููุธุงู:", sys.path)
print("๐งญ dronekit ูู:", __import__('dronekit').__file__)
print("๐งญ pymavlink ูู:", __import__('pymavlink').__file__)
import os
import json
import datetime
import time
import math
import threading
import requests
from flask import Flask, send_from_directory, request, jsonify
from flask_cors import CORS

try:
    from dronekit import connect, VehicleMode, LocationGlobalRelative
    from pymavlink import mavutil
    DRONE_CONNECTIVITY_ENABLED = True
    print("[ูุนูููุงุช] ุชู ุชุญููู DroneKit ู Pymavlink ุจูุฌุงุญ.")
except Exception as e:
    DRONE_CONNECTIVITY_ENABLED = False
    print(f"[ุชุญุฐูุฑ] ูู ูุชู ุงูุนุซูุฑ ุนูู DroneKit/Pymavlink: {e}. ุชู ุชุนุทูู ููุฒุงุช ุงุชุตุงู ุงูุฏุฑูู.")

# --- ุงูุญุงูุฉ ุงูุนุงูุฉ ูุงูุฅุนุฏุงุฏุงุช ---
mission_cancel_flag = False
mission_cancel_lock = threading.Lock() 
current_drone_location = {"lat": 0.0, "lon": 0.0, "alt": 0.0, "mode": "ุบูุฑ ูุนุฑูู"}
drone_location_lock = threading.Lock()
SERVER_PORT = 5055
BASE_DIR = os.path.join(os.path.dirname(__file__), "www")
POINTS_FILE = os.path.join(BASE_DIR, "mission_data.json")
LOG_FILE = os.path.join(BASE_DIR, "mission_log.txt")
BACKUP_FILE = os.path.join(BASE_DIR, "mission_data_backup.json")

# ุฅุนุฏุงุฏุงุช ุงุชุตุงู ุงูุฏุฑูู (ูุงุจูุฉ ููุชุฎุตูุต ุนุจุฑ ูุชุบูุฑุงุช ุงูุจูุฆุฉ)
DRONE_CONNECTION_STRING = os.getenv('DRONE_CONNECTION_STRING', '/dev/ttyACM0')
DRONE_BAUD_RATE = int(os.getenv('DRONE_BAUD_RATE', '57600'))
DRONE_CONNECTION_TIMEOUT = 60  # ุซูุงูู

app = Flask(__name__, static_folder=BASE_DIR)
CORS(app)

def log_event(message, level="ูุนูููุงุช"):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] [{level}] {message}\n"
    try:
        with open(LOG_FILE, "a", encoding='utf-8') as f:
            f.write(log_entry)
    except Exception as e:
        print(f"[ุฎุทุฃ] ูุดู ุงููุชุงุจุฉ ูู ููู ุงูุณุฌู: {e}")
    print(log_entry.strip())

def check_mission_cancel_flag():
    with mission_cancel_lock:
        return mission_cancel_flag

def set_mission_cancel_flag(value):
    with mission_cancel_lock:
        global mission_cancel_flag
        mission_cancel_flag = value

def get_distance_meters(location1, location2):
    R = 6371e3
    lat1 = math.radians(location1.lat)
    lat2 = math.radians(location2.lat)
    delta_lat = math.radians(location2.lat - location1.lat)
    delta_lon = math.radians(location2.lon - location1.lon)
    
    a = math.sin(delta_lat/2) * math.sin(delta_lat/2) + \
        math.cos(lat1) * math.cos(lat2) * \
        math.sin(delta_lon/2) * math.sin(delta_lon/2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    
    return R * c

def send_servo_command(vehicle, servo_num, pwm_value):
    if not DRONE_CONNECTIVITY_ENABLED: 
        return
        
    try:
        msg = vehicle.message_factory.command_long_encode(
            0, 0, 
            mavutil.mavlink.MAV_CMD_DO_SET_SERVO, 
            0,
            servo_num,
            pwm_value,
            0, 0, 0, 0, 0
        )
        vehicle.send_mavlink(msg)
        vehicle.flush()
        log_event(f"ุชู ุฅุฑุณุงู ุฃูุฑ ุณูุฑูู ููููุงุฉ {servo_num} ุจูููุฉ PWM: {pwm_value}", "ูุนูููุงุช")
    except Exception as e:
        log_event(f"ูุดู ุฅุฑุณุงู ุฃูุฑ ุณูุฑูู ููููุงุฉ {servo_num}: {e}", "ุฎุทุฃ")

def update_drone_location():
    """ุฎูููุฉ ูุชุญุฏูุซ ูููุน ุงูุฏุฑูู ุจุงุณุชูุฑุงุฑ"""
    vehicle = None
    while True:
        try:
            if DRONE_CONNECTIVITY_ENABLED and not vehicle:
                try:
                    vehicle = connect(
                        DRONE_CONNECTION_STRING, 
                        wait_ready=False, 
                        baud=DRONE_BAUD_RATE, 
                        timeout=10
                    )
                    log_event("ุชู ุฅูุดุงุก ุงุชุตุงู ุฎููู ูุชุญุฏูุซุงุช ุงููููุน", "ูุนูููุงุช")
                except Exception as e:
                    log_event(f"ูุดู ุงูุงุชุตุงู ุงูุฎููู: {e}", "ุฎุทุฃ")
                    vehicle = None
                    time.sleep(5)
                    continue
            
            if vehicle and vehicle.location.global_relative_frame:
                with drone_location_lock:
                    loc = vehicle.location.global_relative_frame
                    current_drone_location.update({
                        "lat": loc.lat,
                        "lon": loc.lon,
                        "alt": loc.alt,
                        "mode": vehicle.mode.name if vehicle.mode else "ุบูุฑ ูุนุฑูู"
                    })
                    print(f"[ุชุตุญูุญ] ุชุญุฏูุซ ูููุน ุงูุฏุฑูู: ุฎุท ุงูุนุฑุถ: {loc.lat:.6f}, ุฎุท ุงูุทูู: {loc.lon:.6f}, ุงูุงุฑุชูุงุน: {loc.alt:.1f}m")
        except Exception as e:
            log_event(f"ุฎุทุฃ ูู ุชุญุฏูุซ ุงููููุน: {e}", "ุฎุทุฃ")
            vehicle = None
        finally:
            time.sleep(1)

def execute_drone_mission(mission_points, rtl_options):
    log_event("========== ุจุฏุก ุชูููุฐ ุงููููุฉ ==========", "ูุนูููุงุช")
    vehicle = None
    active_servo_channels = {}  # ุชุชุจุน ุฃูุงูุฑ ุงูุณูุฑูู ุงููุดุทุฉ
    
    try:
        connection_string = DRONE_CONNECTION_STRING
        baud = DRONE_BAUD_RATE
        
        for attempt in range(1, 6):  # ุญุงูู ุญุชู 5 ูุฑุงุช
            if check_mission_cancel_flag(): 
                log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ูุญุงููุฉ ุงูุงุชุตุงู.", "ุชุญุฐูุฑ")
                return
                
            log_event(f"ูุญุงููุฉ ุงูุงุชุตุงู ุจุงูุฏุฑูู (ุงููุญุงููุฉ {attempt}/5)...", "ูุนูููุงุช")
            try:
                vehicle = connect(
                    connection_string, 
                    wait_ready=True, 
                    baud=baud, 
                    timeout=DRONE_CONNECTION_TIMEOUT
                )
                log_event("ุชู ุงูุงุชุตุงู ุจุงูุฏุฑูู ุจูุฌุงุญ.", "ูุฌุงุญ")
                break
            except Exception as e:
                log_event(f"ูุดูุช ูุญุงููุฉ ุงูุงุชุตุงู {attempt}: {e}", "ุฎุทุฃ")
                vehicle = None
                time.sleep(3)
        
        if not vehicle:
            log_event("ูุดู ุงูุงุชุตุงู ุจุงูุฏุฑูู ุจุนุฏ 5 ูุญุงููุงุช. ุฅููุงู ุงููููุฉ.", "ุญุฑุฌ")
            return

        log_event("ุงูุชุญูู ูู ุฌุงูุฒูุฉ ุงูุฏุฑูู ููุชุดุบูู...", "ูุนูููุงุช")

        unarmable_start_time = time.time()
        while not vehicle.is_armable:
            if check_mission_cancel_flag():
                log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงูุชุธุงุฑ ุงูุฌุงูุฒูุฉ.", "ุชุญุฐูุฑ")
                return

            elapsed = time.time() - unarmable_start_time

            try:
                reason = []
                if hasattr(vehicle, "system_status") and vehicle.system_status:
                    reason.append(f"ุงูุญุงูุฉ: {vehicle.system_status.state}")
                if hasattr(vehicle, "gps_0") and vehicle.gps_0:
                    reason.append(f"GPS Fix: {vehicle.gps_0.fix_type}")
                if hasattr(vehicle, "ekf_ok"):
                    reason.append("EKF: โ" if vehicle.ekf_ok else "EKF: โ")
                if hasattr(vehicle, "battery") and vehicle.battery and vehicle.battery.voltage:
                    reason.append(f"ุจุทุงุฑูุฉ: {vehicle.battery.voltage:.1f}V")

                reason_str = " | ".join(reason) if reason else "ุณุจุจ ุบูุฑ ูุนุฑูู"
                log_event(f"๐ง ุงูุฏุฑูู ุบูุฑ ุฌุงูุฒ ุจุนุฏ ({int(elapsed)} ุซ). {reason_str}", "ุชุญุฐูุฑ")

            except Exception as e:
                log_event(f"๐ง ุงูุฏุฑูู ุบูุฑ ุฌุงูุฒ ุจุนุฏ ({int(elapsed)} ุซ). (ูุดู ูู ุชุญููู ุงูุณุจุจ: {e})", "ุชุญุฐูุฑ")

            if elapsed >= 120:
                log_event("โ ูู ูุตุจุญ ุงูุฏุฑูู ุฌุงูุฒูุง ุฎูุงู ุฏูููุชูู. ุชู ุฅููุงู ุงููููุฉ.", "ุญุฑุฌ")
                return

            time.sleep(2)

        
        log_event("ุชุบููุฑ ุงููุถุน ุฅูู GUIDED.", "ูุนูููุงุช")
        vehicle.mode = VehicleMode("GUIDED")
        vehicle.flush()
        
        log_event("ุชุดุบูู ุงููุญุฑูุงุช...", "ูุนูููุงุช")
        vehicle.armed = True

        arm_timeout = 0
        while not vehicle.armed:
            if check_mission_cancel_flag(): 
                log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงูุชุดุบูู.", "ุชุญุฐูุฑ")
                return
                
            log_event(f"ูู ุงูุชุธุงุฑ ุงูุชุดุบูู... {arm_timeout+1} ุซูุงูู", "ุชุตุญูุญ")
            time.sleep(1)
            arm_timeout += 1
            if arm_timeout > 30:
                log_event("ูุดู ุงูุชุดุบูู ุฎูุงู 30 ุซุงููุฉ. ุฅููุงู ุงููููุฉ.", "ุญุฑุฌ")
                return
        
        log_event("ุชู ุชุดุบูู ุงููุญุฑูุงุช ุจูุฌุงุญ.", "ูุฌุงุญ")

        first_point = mission_points[0]
        takeoff_alt = first_point.get("alt", 20)
        log_event(f"ุจุฏุก ุงูุฅููุงุน ุงูุนููุฏู ุฅูู ุงุฑุชูุงุน {takeoff_alt} ูุชุฑ.", "ูุนูููุงุช")
        vehicle.simple_takeoff(takeoff_alt)
        
        while True:
            if check_mission_cancel_flag(): 
                log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงูุฅููุงุน.", "ุชุญุฐูุฑ")
                break
                
            current_alt = vehicle.location.global_relative_frame.alt
            if current_alt is None:
                time.sleep(1)
                continue
                
            if current_alt >= takeoff_alt * 0.95:
                log_event(f"ุชู ุงููุตูู ุฅูู ุงุฑุชูุงุน ุงูุฅููุงุน: {current_alt:.1f} ูุชุฑ.", "ูุนูููุงุช")
                break
                
            log_event(f"ุงูุงุฑุชูุงุน ุงูุญุงูู: {current_alt:.1f} ูุชุฑ...", "ุชุตุญูุญ")
            time.sleep(1)

        for i, point in enumerate(mission_points):
            if check_mission_cancel_flag(): 
                log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงูุชููู ุจูู ุงูููุงุท.", "ุชุญุฐูุฑ")
                break
                
            log_event(f"--- ุงูุงูุชูุงู ุฅูู ุงูููุทุฉ {i+1}: '{point.get('name', 'ุบูุฑ ูุนุฑูู')}' ---", "ูุนูููุงุช")
            target_loc = LocationGlobalRelative(point['lat'], point['lon'], point['alt'])
            vehicle.simple_goto(target_loc)

            while True:
                if check_mission_cancel_flag(): 
                    log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงูุญุฑูุฉ.", "ุชุญุฐูุฑ")
                    break
                    
                current_loc = vehicle.location.global_relative_frame
                if current_loc is None:
                    time.sleep(1)
                    continue
                    
                dist = get_distance_meters(current_loc, target_loc)
                log_event(f"ุงููุณุงูุฉ ุฅูู ุงูููุทุฉ {i+1}: {dist:.1f} ูุชุฑ.", "ุชุตุญูุญ")
                if dist <= 1.0:
                    log_event(f"ุชู ุงููุตูู ุฅูู ุงูููุทุฉ {i+1}.", "ูุฌุงุญ")
                    break
                    
                time.sleep(1)
            
            if check_mission_cancel_flag():
                break

            # ุงูุชุธุงุฑ ูุจู ุงูุฅุฌุฑุงุก
            wait_before = point.get('wait_before', 0)
            if wait_before > 0:
                log_event(f"ุงูุชุธุงุฑ ูุจู ุงูุฅุฌุฑุงุกุงุช ููุฏุฉ {wait_before} ุซูุงูู.", "ูุนูููุงุช")
                start_time = time.time()
                while time.time() - start_time < wait_before:
                    if check_mission_cancel_flag(): 
                        log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงูุงูุชุธุงุฑ.", "ุชุญุฐูุฑ")
                        break
                    time.sleep(0.5)
                
                if check_mission_cancel_flag():
                    break

            # ุฅุฌุฑุงุกุงุช ุงูุณูุฑูู
            if point.get('servo', False):
                log_event("ุชูุนูู ุณูุฑูู ุงูููุงุฉ 9.", "ูุนูููุงุช")
                send_servo_command(vehicle, 9, 1750)
                active_servo_channels[9] = (1750, time.time())
                time.sleep(1)
                send_servo_command(vehicle, 9, 1500)
                active_servo_channels[9] = (1500, time.time())
            
            channel = point.get('channel', 'OFF')
            if channel != 'OFF' and not check_mission_cancel_flag():
                channel_num = int(channel)
                pwm = point.get('pwm', 1900)
                duration = point.get('duration', 0)
                log_event(f"ุชูุนูู ุณูุฑูู ุงูููุงุฉ {channel_num} ุจูููุฉ PWM {pwm} ููุฏุฉ {duration} ุซูุงูู.", "ูุนูููุงุช")
                send_servo_command(vehicle, channel_num, pwm)
                active_servo_channels[channel_num] = (pwm, time.time())
                
                start_time = time.time()
                while time.time() - start_time < duration:
                    if check_mission_cancel_flag():
                        break
                    time.sleep(0.1)
                
                # ุงูุนูุฏุฉ ุฅูู ุงููุถุน ุงููุญุงูุฏ ุฅุฐุง ูู ูุชู ุงูุฅูุบุงุก
                if not check_mission_cancel_flag():
                    send_servo_command(vehicle, channel_num, 1500)
                    active_servo_channels[channel_num] = (1500, time.time())
                    log_event(f"ุชู ุฅุฑุฌุงุน ุงูููุงุฉ {channel_num} ุฅูู ุงููุถุน ุงููุญุงูุฏ.", "ูุนูููุงุช")

            if check_mission_cancel_flag():
                break

            # ุงูุชุธุงุฑ ุจุนุฏ ุงูุฅุฌุฑุงุก
            wait_after = point.get('wait_after', 0)
            if wait_after > 0:
                log_event(f"ุงูุชุธุงุฑ ุจุนุฏ ุงูุฅุฌุฑุงุกุงุช ููุฏุฉ {wait_after} ุซูุงูู.", "ูุนูููุงุช")
                start_time = time.time()
                while time.time() - start_time < wait_after:
                    if check_mission_cancel_flag(): 
                        log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงูุงูุชุธุงุฑ.", "ุชุญุฐูุฑ")
                        break
                    time.sleep(0.5)
                
                if check_mission_cancel_flag():
                    break
        
        # ุฅุนุงุฏุฉ ุชุนููู ุฌููุน ุงูุณูุฑูู ุงููุดุทุฉ ุฅุฐุง ุชู ุฅูุบุงุก ุงููููุฉ
        if check_mission_cancel_flag():
            log_event("ุฅุนุงุฏุฉ ุชุนููู ุงูุณูุฑูู ุงููุดุท ุฅูู ุงููุถุน ุงููุญุงูุฏ...", "ุชุญุฐูุฑ")
            for channel, (_, _) in active_servo_channels.items():
                try:
                    send_servo_command(vehicle, channel, 1500)
                    log_event(f"ุชู ุฅุนุงุฏุฉ ุชุนููู ุงูููุงุฉ {channel} ุฅูู ุงููุถุน ุงููุญุงูุฏ", "ูุนูููุงุช")
                except Exception as e:
                    log_event(f"ูุดู ุฅุนุงุฏุฉ ุชุนููู ุงูููุงุฉ {channel}: {e}", "ุฎุทุฃ")
        
        # ุงูุนูุฏุฉ ุฅูู ููุทุฉ ุงูุฅุทูุงู ุฃู ููุทุฉ ูุฎุตุตุฉ
        if check_mission_cancel_flag():
            log_event("ุชู ุฅูุบุงุก ุงููููุฉ. ุงูุนูุฏุฉ ุฅูู ููุทุฉ ุงูุฅุทูุงู...", "ุชุญุฐูุฑ")
            vehicle.mode = VehicleMode("RTL")
        else:
            log_event("ุชู ุฅููุงู ุฌููุน ุงูููุงุท. ุจุฏุก ุงูุนูุฏุฉ...", "ูุนูููุงุช")
            if rtl_options['mode'] == 'rtl':
                log_event("ุชูุนูู ูุถุน RTL.", "ูุนูููุงุช")
                vehicle.mode = VehicleMode("RTL")
            else:  # ููุทุฉ ุนูุฏุฉ ูุฎุตุตุฉ
                log_event(f"ุงูุชูุฌู ุฅูู ููุทุฉ ุงูุนูุฏุฉ ุงููุฎุตุตุฉ: {rtl_options['lat']}, {rtl_options['lon']} ุนูู ุงุฑุชูุงุน {rtl_options['alt']} ูุชุฑ.", "ูุนูููุงุช")
                custom_rtl_loc = LocationGlobalRelative(rtl_options['lat'], rtl_options['lon'], rtl_options['alt'])
                vehicle.simple_goto(custom_rtl_loc)
                
                # ุงูุงูุชุธุงุฑ ุญุชู ุงููุตูู ุฅูู ุงูููุทุฉ ุงููุฎุตุตุฉ
                while not check_mission_cancel_flag():
                    current_loc = vehicle.location.global_relative_frame
                    if current_loc is None:
                        time.sleep(1)
                        continue
                        
                    dist = get_distance_meters(current_loc, custom_rtl_loc)
                    log_event(f"ุงููุณุงูุฉ ุฅูู ููุทุฉ ุงูุนูุฏุฉ: {dist:.1f} ูุชุฑ.", "ุชุตุญูุญ")
                    if dist <= 1.0:
                        log_event("ุชู ุงููุตูู ุฅูู ููุทุฉ ุงูุนูุฏุฉ ุงููุฎุตุตุฉ. ุงููุจูุท.", "ูุนูููุงุช")
                        vehicle.mode = VehicleMode("LAND")
                        break
                    time.sleep(1)
        
        # ุงูุงูุชุธุงุฑ ูููุจูุท ูุฅููุงู ุงูุชุดุบูู
        while vehicle.armed and not check_mission_cancel_flag():
            time.sleep(2)
            if vehicle.location.global_relative_frame:
                log_event(f"ุงูุงุฑุชูุงุน ุงูุญุงูู: {vehicle.location.global_relative_frame.alt:.1f} ูุชุฑ", "ุชุตุญูุญ")
            
        if check_mission_cancel_flag():
            log_event("ุชู ุฅูุบุงุก ุงููููุฉ ุฃุซูุงุก ุงููุจูุท.", "ุชุญุฐูุฑ")
        else:
            log_event("ูุจุท ุงูุฏุฑูู ูุชู ุฅููุงู ุงูุชุดุบูู.", "ูุฌุงุญ")

    except Exception as e:
        log_event(f"ุฎุทุฃ ุญุฑุฌ ูู ุงููููุฉ: {e}", "ุญุฑุฌ")
        if vehicle and vehicle.armed:
            try:
                log_event("ุชูุนูู ูุถุน RTL.", "ุชุญุฐูุฑ")
                vehicle.mode = VehicleMode("RTL")
            except:
                log_event("ูุดู ุชูุนูู ูุถุน RTL", "ุฎุทุฃ")
    finally:
        if vehicle:
            try:
                log_event("ูุทุน ุงูุงุชุตุงู ุจุงูุฏุฑูู.", "ูุนูููุงุช")
                vehicle.close()
            except:
                log_event("ุฎุทุฃ ูู ูุทุน ุงูุงุชุตุงู ุจุงูุฏุฑูู", "ุฎุทุฃ")
        log_event("========== ุงูุชูุช ุงููููุฉ ==========", "ูุนูููุงุช")
        set_mission_cancel_flag(False)  # ุฅุนุงุฏุฉ ุชุนููู ุงูุนูู ูููููุฉ ุงูุชุงููุฉ

# --- ูุณุงุฑุงุช Flask ---
@app.route('/api/elevation')
def api_get_elevation():
    lat = request.args.get('lat'); lon = request.args.get('lon')
    try:
        url = f"https://api.open-meteo.com/v1/elevation?latitude={lat}&longitude={lon}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        elevation = float(response.json()["elevation"][0])
        return jsonify({"elevation": elevation})
    except Exception as e:
        log_event(f"ุฎุทุฃ ูู API ุงูุงุฑุชูุงุน: {e}", "ุฎุทุฃ")
        return jsonify({"error": "ูุดู ุงูุญุตูู ุนูู ุงูุงุฑุชูุงุน"}), 500

@app.after_request
def add_cors_headers(r):
    r.headers['Access-Control-Allow-Origin'] = '*'
    r.headers['Access-Control-Allow-Headers'] = 'Content-Type'
    r.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS, DELETE'
    return r

@app.route('/')
def serve_index(): 
    return send_from_directory(BASE_DIR, "index.html")

@app.route('/api/status')
def get_server_status():
    return jsonify({
        "connected": True, 
        "drone_connectivity_enabled": DRONE_CONNECTIVITY_ENABLED,
        "drone_connection_string": DRONE_CONNECTION_STRING,
        "drone_baud_rate": DRONE_BAUD_RATE
    })

@app.route('/api/mission/save', methods=['POST'])
def api_save_mission():
    try:
        data = request.json
        if not data: return jsonify({"status": "ุจูุงูุงุช ุบูุฑ ุตุงูุญุฉ"}), 400
        if os.path.exists(POINTS_FILE): 
            os.replace(POINTS_FILE, BACKUP_FILE)
        with open(POINTS_FILE, 'w', encoding='utf-8') as f: 
            json.dump(data, f, indent=4, ensure_ascii=False)
        log_event("ุชู ุญูุธ ุจูุงูุงุช ุงููููุฉ ุจูุฌุงุญ.", "ูุฌุงุญ")
        return jsonify({"status": "ุชู ุงูุญูุธ ุจูุฌุงุญ."})
    except Exception as e:
        log_event(f"ูุดู ุญูุธ ุงููููุฉ: {e}", "ุฎุทุฃ")
        return jsonify({"status": f"ูุดู ุงูุญูุธ: {e}"}), 500

@app.route('/api/mission/load', methods=['GET'])
def api_load_mission():
    try:
        file_to_load = POINTS_FILE if os.path.exists(POINTS_FILE) else BACKUP_FILE
        if os.path.exists(file_to_load):
            with open(file_to_load, 'r', encoding='utf-8') as f:
                data = json.load(f)
                log_event("ุชู ุชุญููู ุจูุงูุงุช ุงููููุฉ.", "ูุฌุงุญ")
                return jsonify(data)
        log_event("ูู ูุชู ุงูุนุซูุฑ ุนูู ููู ูููุฉุ ุฌุงุฑู ุฅูุดุงุก ููู ุงูุชุฑุงุถู.", "ุชุญุฐูุฑ")
        return jsonify({"points": [], "rtl": {"mode": "rtl", "alt": 20, "lat": 0, "lon": 0}})
    except Exception as e:
        log_event(f"ูุดู ุชุญููู ุงููููุฉ: {e}", "ุฎุทุฃ")
        return jsonify({"status": f"ูุดู ุงูุชุญููู: {e}"}), 500

@app.route('/api/log', methods=['GET', 'DELETE'])
def api_mission_log():
    if request.method == 'GET':
        if not os.path.exists(LOG_FILE): 
            return ""
        with open(LOG_FILE, 'r', encoding='utf-8') as f: 
            return f.read()
    elif request.method == 'DELETE':
        open(LOG_FILE, 'w').close()
        log_event("ุชู ูุณุญ ุณุฌู ุงููููุฉ.", "ูุนูููุงุช")
        return jsonify({"status": "ุชู ูุณุญ ุงูุณุฌู."})

@app.route('/api/drone/location', methods=['GET'])
def api_drone_location():
    with drone_location_lock: 
        return jsonify(current_drone_location)

@app.route('/api/mission/start', methods=['POST'])
def api_start_mission():
    if not DRONE_CONNECTIVITY_ENABLED:
        log_event("ูุดู ุจุฏุก ุงููููุฉ: ุงุชุตุงู ุงูุฏุฑูู ูุนุทู.", "ุฎุทุฃ")
        return jsonify({"status": "ูุดู ุจุฏุก ุงููููุฉ: ุงุชุตุงู ุงูุฏุฑูู ูุนุทู."}), 503
    
    set_mission_cancel_flag(False)
    try:
        with open(POINTS_FILE, 'r', encoding='utf-8') as f: 
            mission_data = json.load(f)
            
        points_to_execute = [p for p in mission_data.get("points", []) if p.get("enabled", True)]
        if not points_to_execute:
            log_event("ูุดู ุจุฏุก ุงููููุฉ: ูุง ุชูุฌุฏ ููุงุท ููุนูุฉ.", "ุชุญุฐูุฑ")
            return jsonify({"status": "ูุง ุชูุฌุฏ ููุงุท ููุนูุฉ ูุจุฏุก ุงููููุฉ."}), 400
            
        rtl_options = mission_data.get("rtl", {"mode": "rtl", "alt": 20, "lat": 0, "lon": 0})
        
        mission_thread = threading.Thread(
            target=execute_drone_mission, 
            args=(points_to_execute, rtl_options)
        )
        mission_thread.daemon = True
        mission_thread.start()
        
        log_event("ุชู ุฅุฑุณุงู ุฃูุฑ ุจุฏุก ุงููููุฉ.", "ูุฌุงุญ")
        return jsonify({"status": "ุจุฏุฃ ุชูููุฐ ุงููููุฉ."})
    except Exception as e:
        log_event(f"ูุดู ุจุฏุก ุงููููุฉ ุจุณุจุจ ุฎุทุฃ ูู ุงูุจูุงูุงุช: {e}", "ุฎุทุฃ")
        return jsonify({"status": f"ูุดู ุชุญููู ุงูุจูุงูุงุช: {e}"}), 500

@app.route('/api/mission/end', methods=['POST'])
def api_end_mission():
    set_mission_cancel_flag(True)
    log_event("ุชู ุฅุฑุณุงู ุฃูุฑ ุฅููุงุก ุงููููุฉ.", "ุชุญุฐูุฑ")
    return jsonify({"status": "ุชู ุทูุจ ุฅููุงุก ุงููููุฉ."})

if __name__ == '__main__':
    if not os.path.exists(BASE_DIR): 
        os.makedirs(BASE_DIR)
    if not os.path.exists(LOG_FILE): 
        open(LOG_FILE, 'a', encoding='utf-8').close()
    if not os.path.exists(POINTS_FILE):
        with open(POINTS_FILE, 'w', encoding='utf-8') as f:
            json.dump({
                "points": [], 
                "rtl": {"mode": "rtl", "alt": 20, "lat": 0, "lon": 0}
            }, f)
    
    # ุจุฏุก ูุคุดุฑ ุชุญุฏูุซ ูููุน ุงูุฏุฑูู ุฅุฐุง ูุงู ุงุชุตุงู ุงูุฏุฑูู ููุนูุงู
    if DRONE_CONNECTIVITY_ENABLED:
        loc_thread = threading.Thread(target=update_drone_location, daemon=True)
        loc_thread.start()
        log_event("ุจุฏุก ูุคุดุฑ ุชุญุฏูุซ ูููุน ุงูุฏุฑูู", "ูุนูููุงุช")
    
    print("*"*50)
    print(f"ุจุฏุก ุงูุฎุงุฏู ุนูู http://0.0.0.0:{SERVER_PORT}")
    print("*"*50)
    app.run(host='0.0.0.0', port=SERVER_PORT, debug=False, threaded=True)
